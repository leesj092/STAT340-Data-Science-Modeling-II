y = 10
install.packages("tidyverse")
library(tidyverse)
?read.csv
install.packages("tidyverse")
library(tidyverse)
getwd
getwd()
setwd("~/Desktop/School/Spring 2023/STAT 340/Midterm")
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,message=F,warning=F,error=TRUE,fig.align='center')
if(!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
# Chunk 2
pete.scores   = c(19, 17, 20, 19, 18, 17, 20, 19, 24, 20, 18, 24, 20, 22, 21)
repete.scores = c(15, 19, 20, 21,  9, 28, 18, 19, 21, 19, 14, 17, 14,  5,  9)
sd_pete = sd(pete.scores)
sd_repete = sd(repete.scores)
sd_pete
sd_repete
sd_pete = sd(pete.scores)
sd_repete = sd(repete.scores)
T_obsd = sd_repete - sd_pete
T_obsd
sd_pete = sd(pete.scores)
sd_repete = sd(repete.scores)
Tobsd = sd_repete - sd_pete
Tobsd
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( sd(shuffled_repete)-sd(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
# Now, let's make a histogram of those permuted test statistics.
hist( test_statistics )
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( sd(shuffled_repete)-sd(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
sum(test_statistics >= Tobsd)/NMC
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( sd(shuffled_repete)-sd(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
sum(test_statistics >= Tobsd)/NMC
med_pete = median(pete.scores)
med_repete = median(repete.scores)
Tobsd = med_repete - med_pete
Tobsd
-Tobsd
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( median(shuffled_repete)-median(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
abline( v=-Tobsd, lw=3, col='red')
pvalue = sum((test_statistics >= (-Tobsd)) | (test_statistics <= (Tobsd)))/NMC
sample(999999, size = 3, replace = FALSE)
digits <- as.numeric(strsplit(as.character(1234), "")[[1]])
digits
4 % 2
4 %% 2
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 0)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
middle_square = function(x) as.integer(substr(as.character(x^2),4,9))
N = 200
mc.mid = c(455455,rep(NA,N-1))
for(i in 1:(N-1)) mc.mid[i+1] = middle_square(mc.mid[i])
mc.mid
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 0)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
Tobsd = mean(proportions)
# Simulate null distribution of test statistic
null_T = replicate(10000, {
null_seq = sample(1:999999, size = 200, replace = TRUE)
null_props <=sapply(null_seq, evenProp)
mean(abs(null_props - 0.5))
})
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 0)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
Tobsd = mean(proportions)
# Simulate null distribution of test statistic
null_T = replicate(10000, {
null_seq = sample(1:999999, size = 200, replace = TRUE)
null_props = sapply(null_seq, evenProp)
mean(null_props)
})
# Calculate p-value
p_value = mean(null_T >= T)
p_value
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 0)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
Tobsd = mean(proportions)
# Simulate null distribution of test statistic
null_T = replicate(10000, {
null_seq = sample(1:999999, size = 200, replace = TRUE)
null_props = sapply(null_seq, evenProp)
mean(null_props)
})
# Calculate p-value
p_value = mean(null_T >= Tobsd)
p_value
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 0)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
Tobsd = mean(proportions)
Tobsd
# Function to calculate proportion of even digits in a number
evenProp = function(num) {
digits = as.numeric(strsplit(as.character(num), "")[[1]])
proportion = mean(digits %% 2 == 1)
return(proportion)
}
# Calculate observed statistic
proportions = sapply(mc.mid, evenProp)
Tobsd = mean(proportions)
Tobsd
nullDist = sample(999999,size=200,replace=TRUE);
nullDist
table(mc.mid)
nullDist = sample(0:999999, size = 200, replace = TRUE)
table(nullDist)
mean(table(nullDist))
mean(table(mc.mid))
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,message=F,warning=F,error=TRUE,fig.align='center')
if(!require(tidyverse)) install.packages("tidyverse")
library(tidyverse)
# Chunk 2
pete.scores   = c(19, 17, 20, 19, 18, 17, 20, 19, 24, 20, 18, 24, 20, 22, 21)
repete.scores = c(15, 19, 20, 21,  9, 28, 18, 19, 21, 19, 14, 17, 14,  5,  9)
# Chunk 3
sd_pete = sd(pete.scores)
sd_repete = sd(repete.scores)
Tobsd = sd_repete - sd_pete
Tobsd
# Chunk 4
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( sd(shuffled_repete)-sd(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
pvalue = sum(test_statistics >= Tobsd)/NMC
pvalue
# Chunk 5
med_pete = median(pete.scores)
med_repete = median(repete.scores)
Tobsd = med_repete - med_pete
Tobsd
# Chunk 6
# Shuffling function from class
permute_and_compute <- function( pete_data, repete_data ) {
pooled_data <- c( pete_data, repete_data );
# Randomly shuffle the data and assign it to control and treatment groups.
n_pete <- length( pete_data );
n_repete <- length( repete_data );
n_total <- n_pete + n_repete;
shuffled_data <- sample( pooled_data, size=n_total, replace=FALSE );
shuffled_pete <- shuffled_data[1:n_pete];
shuffled_repete <- shuffled_data[(n_pete+1):n_total];
return( median(shuffled_repete)-median(shuffled_pete) );
}
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
# Now, NMC times, shuffle the data, recompute the test statistic, and record.
for(i in 1:NMC ) {
test_statistics[i] <- permute_and_compute( pete.scores, repete.scores );
}
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
abline( v=-Tobsd, lw=3, col='red')
pvalue = sum((test_statistics >= (-Tobsd)) | (test_statistics <= (Tobsd)))/NMC
pvalue
# Chunk 7
middle_square = function(x) as.integer(substr(as.character(x^2),4,9))
N = 200
mc.mid = c(455455,rep(NA,N-1))
for(i in 1:(N-1)) mc.mid[i+1] = middle_square(mc.mid[i])
mc.mid
Tobsd = mean(table(mc.mid))
NMC <- 1e4;
test_statistics <- rep( 0, NMC ); # Vector to store our "fake" test statistics
for(i in 1:NMC ) {
nullDist = sample(0:999999, size = 200, replace = TRUE)
test_statistics[i] = mean(table(nullDist));
}
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
hist( test_statistics )
abline( v=Tobsd, lw=3, col='red')
hist( test_statistics , xlim = 5)
hist(test_statistics, xlim=c(0,10))
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim=c(0,10), abline(v=Tobsd, lw=3, col='red'))
hist(test_statistics, xlim=c(0,10), )
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim=c(10), )
hist(test_statistics, xlim=c(0,10), )
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim=c(0,10), border = 5)
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim=c(0,10), border = 2)
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim=c(0,10))
abline(v=Tobsd, lw=3, col='red')
pvalue = sum(test_statistics >= Tobsd)/NMC
pvalue
hist(test_statistics)
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim = c(1,2))
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim = c(1,2), bin = 10)
abline(v=Tobsd, lw=3, col='red')
hist(test_statistics, xlim = c(1,3))
abline(v=Tobsd, lw=3, col='red')
