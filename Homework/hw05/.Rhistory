y = 10
install.packages("tidyverse")
library(tidyverse)
?read.csv
install.packages("tidyverse")
library(tidyverse)
getwd
getwd()
setwd("~/Desktop/School/Spring 2023/STAT 340/Homework/hw05")
pwd
setwd("~/Desktop/School/Spring 2023/STAT 340/Homework/hw05")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
remove.packages("caret")
remove.packages(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
set.seed(1)
library(caret)
install.packages("ISLR")
names(mtcars)
mt_logistic = glm(am ~ 1 + drat + disp, data = mtcars, family = binomial);
summary(mt_logistic)
mt_logisticOne = glm(am ~ 1 + drat, data = mtcars, family = binomial);
summary(mt_logisticOne)
ggplot(mtcars, aes(x = drat, y = am)) + geom_point()
head(mtcars)
ggplot(mtcars, aes(x = drat, y = am)) + geom_point() + geom_smooth(formulat='y ~ 1 + x', se=FALSE, method='glm', method.args=list(family = "binomial"))
library(ggplot2)
ggplot(mtcars, aes(x = drat, y = am)) + geom_point() + geom_smooth(formulat='y ~ 1 + x', se=FALSE, method='glm', method.args=list(family = "binomial")) + ggtitle('am vs drat')
library(ggplot2)
ggplot(mtcars, aes(x = drat, y = am)) + geom_point() + geom_smooth(formula='y ~ 1 + x', se=FALSE, method='glm', method.args=list(family = "binomial")) + ggtitle('am vs drat')
swiss = datasets::swiss
?datasets::swiss
head(swiss)
ggplot(swiss, aes(x = Agriculture, y = Fertility)) + geom_point()
ggplot(swiss, aes(x = Agriculture, y = Fertility, color = Catholic > 50)) + geom_point()
ggplot(swiss, aes(x = Agriculture, y = Fertility, color = Education > 50)) + geom_point()
ggplot(swiss, aes(x = Agriculture, y = Fertility, color = Catholic > 50)) + geom_point()
#ggplot(swiss, aes(x = Agriculture, y = Fertility)) + geom_point()
# Scatter plot of Fertility vs. Agriculture
ggplot(data = swiss, aes(x = Agriculture, y = Fertility)) +
geom_point() +
xlab("Percentage of males involved in agriculture") +
ylab("Standardized birth rate") +
ggtitle("Fertility vs. Agriculture")
# Scatter plot of Fertility vs. Examination
ggplot(data = swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
xlab("Percentage of men who were conscripted") +
ylab("Standardized birth rate") +
ggtitle("Fertility vs. Examination")
# Scatter plot of Fertility vs. Education
ggplot(data = swiss, aes(x = Education, y = Fertility)) +
geom_point() +
xlab("Percentage of education beyond primary school") +
ylab("Standardized birth rate") +
ggtitle("Fertility vs. Education")
# Scatter plot of Fertility vs. Catholic
ggplot(data = swiss, aes(x = Catholic, y = Fertility)) +
geom_point() +
xlab("Percentage of Catholic citizens") +
ylab("Standardized birth rate") +
ggtitle("Fertility vs. Catholic")
# Scatter plot of Fertility vs. Infant.Mortality
ggplot(data = swiss, aes(x = Infant.Mortality, y = Fertility)) +
geom_point() +
xlab("Infant mortality (per 1000)") +
ylab("Standardized birth rate") +
ggtitle("Fertility vs. Infant Mortality")
swiss_all = lm(Fertility ~ 1 + Agriculture + Examination + Education + Catholic + Infant.Mortality, data = swiss)
swiss_agri = lm(Fertility ~ 1 + Agriculture, data = swiss)
swiss_exam = lm(Fertility ~ 1 + Examination, data = swiss)
summary(swiss_all)
summary(swiss_agri)
summary(swiss_exam)
set.seed(1)
library(caret)
model1 = train(Fertility ~ 1 + Agriculture + Examination + Education + Catholic + Infant.Mortality, method="lm", data=swiss, trControl = trainControl(method="cv", number=5))
model2 = train(Fertility ~ 1 + Agriculture + Examination, method="lm", data=swiss, trControl = trainControl(method="cv", number=5))
model3 = train(Fertility ~ 1 + Education + Catholic, method="lm", data=swiss, trControl = trainControl(method="cv", number=5))
print(model1)
print(model2)
print(model3)
library(ISLR)
Carseats = ISLR::Carseats
# you should read the help page by running ?Carseats
# we can also peek at the data frame before using it
str(Carseats)
head(Carseats)
ggplot(Carseats, aes(x = Sales, y = ..density..)) +
geom_histogram(bins = 30, fill = "skyblue", alpha = 0.7) +
facet_wrap(~ShelveLoc, ncol = 3) +
labs(title = "Distribution of Sales by ShelveLoc", y = "Density", x = "Sales")
?Carseats
pairs(Carseats)
cor_matrix <- cor(Carseats)
ggplot(Carseats, aes(x = Price, y = Sales))
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point()
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Income, y = Sales)) + geom_point() + ggtitle("Sales vs Income")
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Sales, y = Income)) + geom_point() + ggtitle("Sales vs Income")
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Urvan, y = Sales)) + geom_point() + ggtitle("Sales vs Urban")
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Urban, y = Sales)) + geom_point() + ggtitle("Sales vs Urban")
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Urban, y = Sales)) + geom_point() + ggtitle("Sales vs Urban")
ggplot(Carseats, aes(x = US, y = Sales)) + geom_point() + ggtitle("Sales vs US")
?Carseats
ggplot(Carseats, aes(x = Price, y = Sales)) + geom_point() + ggtitle("Sales vs Price")
ggplot(Carseats, aes(x = Urban, y = Sales)) + geom_boxplot() + ggtitle("Sales vs Urban")
ggplot(Carseats, aes(x = US, y = Sales)) + geom_boxplot() + ggtitle("Sales vs US")
?Carseats
y = Carseats$Sales
x = model.matrix(Sales ~ ., data = Carseats)[,-1]
x
y = Carseats$Sales
# model.matrix converts categorical values to binary values
x = model.matrix(Sales ~ ., data = Carseats)[,-1]
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
library(glmnet)
y = Carseats$Sales
# model.matrix converts categorical values to binary values
x = model.matrix(Sales ~ ., data = Carseats)[,-1]
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
library(glmnet)
y = Carseats$Sales
# model.matrix converts categorical values to binary values
x = model.matrix(Sales ~ ., data = Carseats)[,-1]
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
summary(best_model)
summary(best_model)$pvalue
summary(best_model)$pvalue
cv <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
mean(cv$cvm)
cv <- cv.glmnet(x, y, alpha = 1, nfolds = 10)
mean(cv$cvm)
# predict sales using the model
y_pred <- predict(best_model, newx = x, s = best_lambda)
# calculate residuals
resid <- y - y_pred
# plot residuals against fitted values
plot(y_pred, resid, xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
# create QQ plot of residuals
qqnorm(resid)
qqline(resid)
cv = cv.glmnet(x, y, alpha = 1, nfolds = 10)
mean(cv$cvm)
# predict sales using the model
y_pred = predict(best_model, newx = x, s = best_lambda)
# calculate residuals
resid = y - y_pred
# plot residuals against fitted values
plot(y_pred, resid,) + xlab("Fitted Values") + ylab("Residuals") + abline(h = 0, col = "red")
cv = cv.glmnet(x, y, alpha = 1, nfolds = 10)
mean(cv$cvm)
# predict sales using the model
y_pred = predict(best_model, newx = x, s = best_lambda)
# calculate residuals
resid = y - y_pred
# plot residuals against fitted values
plot(y_pred, resid,) + xlab("Fitted Values") + ylab("Residuals")
