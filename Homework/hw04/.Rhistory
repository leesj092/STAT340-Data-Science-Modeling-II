setwd("~/Desktop/School/Spring 2023/STAT 340/Homework/hw04")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
View(catamaran)
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases")
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases", xlab = "Litter Purchases (lb)", ylab = "Spending")
catamaran_lm = lm(catamaran$spending ~ 1 + catamaran$litter, data = catamaran)
catamaran_lm = lm(catamaran$spending ~ 1 + catamaran$litter, data = catamaran)
summary(catamaran_lm)
catamaran_lm = lm(catamaran$spending ~ 1 + catamaran$litter, data = catamaran)
cat_intercept_hat = catamaran_lm$coefficients
cat_intercept_hat
catamaran_lm = lm(spending ~ 1 + litter, data = catamaran)
cat_intercept_hat = unname(catamaran_lm$coefficients[1])
cat_intercept_hat
cat_slope_hat = unname(catamaran_lm$coefficients[2])
cat_slope_hat
plot(catamaran_lm, which=2)
confint(catamaran_lm, level=0.95)
catInt = confint(catamaran_lm, level=0.95)
catInt = confint(catamaran_lm, level=0.95)
catInt[1]
confint(catamaran_lm, level=0.95)
View(catInt)
catInt = confint(catamaran_lm, level=0.95)
catInt['litter']
catInt = confint(catamaran_lm, level=0.95)
catInt['litter',]
summary(catamaran_lm)
root(4)
sqrt(4)
test = df['col1', 'col2']
x = c(1,2,3)
y = c(4,5,6)
data = df(x,y)
data = data.frame(x,y)
View(data)
sampleData = generate_linear_data(100, 0.25)
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictor, responses)
return(linear_data)
}
sampleData = generate_linear_data(100, 0.25)
sampleData = generate_linear_data(100, 0.25)
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictors, responses)
return(linear_data)
}
sampleData = generate_linear_data(100, 0.25)
plot(sampleData)
sampleData = generate_linear_data(100, 0.25)
plot(sampleData)
sampleData = generate_linear_data(100, 0.25)
plot(sampleData, main = "Sample Plot of Responses VS Predictors", xlab = "predictors", ylab = "Responses")
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
# Chunk 3
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases", xlab = "Litter Purchases (lb)", ylab = "Spending")
# Chunk 4
catamaran_lm = lm(spending ~ 1 + litter, data = catamaran)
cat_intercept_hat = unname(catamaran_lm$coefficients[1])
cat_intercept_hat
cat_slope_hat = unname(catamaran_lm$coefficients[2])
cat_slope_hat
# Chunk 5
plot(catamaran_lm, which=2)
# Chunk 6
catInt = confint(catamaran_lm, level=0.95)
catInt['litter',]
# Chunk 7
summary(catamaran_lm)
# Chunk 8
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictors, responses)
return(linear_data)
}
sampleData = generate_linear_data(100, 0.25)
plot(sampleData, main = "Sample Plot of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
moreNoise = generate_linear_data(100, 1)
plot(sampleData, main = "Sample Plot (Increased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
View(data)
View(sampleData)
test = vector(length = 3)
test = vector(mode = "numeric",length = 3)
test <- rep(NA,3)
seq(1,4, 1)
sig2 = seq(0.25, 4, 0.25)
estimates = rep(NA, length(sig2))
sig2 = seq(0.25, 4, 0.25)
estimates = rep(NA, length(sig2))
i = 0
for (sig in sig2) {
estimates[i] = estimate_beta1hat_variance(100, sig, 1000)
i = i + 1
}
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
# Chunk 3
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases", xlab = "Litter Purchases (lb)", ylab = "Spending")
# Chunk 4
catamaran_lm = lm(spending ~ 1 + litter, data = catamaran)
cat_intercept_hat = unname(catamaran_lm$coefficients[1])
cat_intercept_hat
cat_slope_hat = unname(catamaran_lm$coefficients[2])
cat_slope_hat
# Chunk 5
plot(catamaran_lm, which=2)
# Chunk 6
catInt = confint(catamaran_lm, level=0.95)
catInt['litter',]
# Chunk 7
summary(catamaran_lm)
# Chunk 8
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictors, responses)
return(linear_data)
}
# Chunk 9
sampleData = generate_linear_data(100, 0.25)
plot(sampleData, main = "Sample Plot of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 10
moreNoise = generate_linear_data(100, 1)
plot(moreNoise, main = "Sample Plot (Increased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 11
lessNoise = generate_linear_data(100, 0.1)
plot(lessNoise, main = "Sample Plot (Decreased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 12
generate_and_estimate = function( n, sigma2 ) {
observations = generate_linear_data(n, sigma2)
model = lm(responses ~ 1 + predictors, data = observations)
beta1hat = unname(coef(model)[2])
return(beta1hat)
}
# Chunk 13
estimate_beta1hat_variance = function( n, sigma2, M ) {
replicates <- rep(NA,M)
for (i in 1:M) {
replicates[i] = generate_and_estimate(n, sigma2)
}
estimate = var(replicates)
return(estimate)
}
sig2 = seq(0.25, 4, 0.25)
estimates = rep(NA, length(sig2))
i = 0
for (sig in sig2) {
estimates[i] = estimate_beta1hat_variance(100, sig, 1000)
i = i + 1
}
plot(sig2, estimates)
plot(sig2, estimates, main = expression("Variance of Estimator as a function of"~\sigma^2), xlab = \sigma^2, ylab = expression("Variance of Estimator"~\hat{\beta}_1))
plot(sig2, estimates, main = expression("Variance of Estimator as a function of"~\sigma^2), xlab = sigma^2, ylab = expression("Variance of Estimator"~hat{\beta}_1))
plot(sig2, estimates, main = "Variance of Estimator as a function of Sigma Squared", xlab = "Sigma Squared", ylab = "Variance of Estimator Beta_1_hat$")
?mtcars
head(mtcars, 10)
View(mtcars)
lm.mtcars = lm(mpg ~ 1 + hp + qsec, data = mtcars)
lm.mtcars = lm(mpg ~ 1 + hp + qsec, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
summary(lm.mtcars)
??confint
?confint
confint(lm.mtcars, level = 0.95)
library(MASS)
head(cats)
?plot
??plot
plot(cats$Hwt, cats$Bwt)
plot(cats$Bwt, cats$Hwt, main = "Cat Heart Weight (g) VS Body Weight (kg)", xlab = "Heart Weight (g)", ylab = "Body Weight (kg)")
lm.cats = lm(Hwt ~ 1 + Bwt, data = cats)
clear
lm.cats$coefficients
summary(lm.cats)
plot(cats$Bwt, cats$Hwt, main = "Cat Heart Weight (g) VS Body Weight (kg)", xlab = "Body Weight (kg)", ylab = "Heart Weight (g)")
plot(cats$Bwt, cats$Hwt, main = "Cat Heart Weight (g) VS Body Weight (kg)")
plot(cats$Bwt, cats$Hwt, main = "Cat Heart Weight (g) VS Body Weight (kg)", xlab = "Body Weight (kg)", ylab = "Heart Weight (g)")
summary(lm.cats)
lm.cats$coefficients
??ggplot
?ggplot
??ggplot
library(ggplot2)
ggplot(cats, aes(x = Bwt, y = Hwt, color = Sex)) + geom_point()
library(ggplot2)
ggplot(cats, aes(x = Bwt, y = Hwt, color = Sex)) + geom_point() + xlab("Body Weight (kg)") + ylab("Heart Weight (g)") + title("Cat Heart Weight (g) VS Body Weight (kg)")
library(ggplot2)
ggplot(cats, aes(x = Bwt, y = Hwt, color = Sex)) + geom_point() + xlab("Body Weight (kg)") + ylab("Heart Weight (g)") + ggtitle("Cat Heart Weight (g) VS Body Weight (kg)")
lm_catSex = lm(Hwt ~ 1 + Bwt + Sex + Bwt:Sex, data = cats)
summary(lm_catSex)
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
# Chunk 3
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases", xlab = "Litter Purchases (lb)", ylab = "Spending")
# Chunk 4
catamaran_lm = lm(spending ~ 1 + litter, data = catamaran)
cat_intercept_hat = unname(catamaran_lm$coefficients[1])
cat_intercept_hat
cat_slope_hat = unname(catamaran_lm$coefficients[2])
cat_slope_hat
# Chunk 5
plot(catamaran_lm, which=2)
# Chunk 6
catInt = confint(catamaran_lm, level=0.95)
catInt['litter',]
# Chunk 7
summary(catamaran_lm)
# Chunk 8
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictors, responses)
return(linear_data)
}
# Chunk 9
sampleData = generate_linear_data(100, 0.25)
plot(sampleData, main = "Sample Plot of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 10
moreNoise = generate_linear_data(100, 1)
plot(moreNoise, main = "Sample Plot (Increased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 11
lessNoise = generate_linear_data(100, 0.1)
plot(lessNoise, main = "Sample Plot (Decreased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 12
generate_and_estimate = function( n, sigma2 ) {
observations = generate_linear_data(n, sigma2)
model = lm(responses ~ 1 + predictors, data = observations)
beta1hat = unname(coef(model)[2])
return(beta1hat)
}
# Chunk 13
estimate_beta1hat_variance = function( n, sigma2, M ) {
replicates <- rep(NA,M)
for (i in 1:M) {
replicates[i] = generate_and_estimate(n, sigma2)
}
estimate = var(replicates)
return(estimate)
}
# Chunk 14
sig2 = seq(0.25, 4, 0.25)
estimates = rep(NA, length(sig2))
i = 0
for (sig in sig2) {
estimates[i] = estimate_beta1hat_variance(100, sig, 1000)
i = i + 1
}
plot(sig2, estimates, main = "Variance of Estimator as a function of Sigma Squared", xlab = "Sigma Squared", ylab = "Variance of Estimator Beta_1_hat")
# Chunk 15
lm.mtcars = lm(mpg ~ 1 + hp + qsec, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
# Chunk 16
# summary(lm.mtcars)
# Chunk 17
confint(lm.mtcars, level = 0.95)
# Chunk 18
library(MASS)
head(cats)
# Chunk 19
plot(cats$Bwt, cats$Hwt, main = "Cat Heart Weight (g) VS Body Weight (kg)", xlab = "Body Weight (kg)", ylab = "Heart Weight (g)")
# Chunk 20
lm.cats = lm(Hwt ~ 1 + Bwt, data = cats)
# Chunk 21
lm.cats$coefficients
# Chunk 22
library(ggplot2)
ggplot(cats, aes(x = Bwt, y = Hwt, color = Sex)) + geom_point() + xlab("Body Weight (kg)") + ylab("Heart Weight (g)") + ggtitle("Cat Heart Weight (g) VS Body Weight (kg)")
lm_catSex = lm(Hwt ~ 1 + Bwt + Sex + Bwt:Sex, data = cats)
summary(lm_catSex)
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
catamaran = read.csv('https://pages.stat.wisc.edu/~bwu62/catamaran.csv')
# Chunk 3
plot(catamaran$litter, catamaran$spending, main = "Customer Spending vs Cat Litter Purchases", xlab = "Litter Purchases (lb)", ylab = "Spending")
# Chunk 4
catamaran_lm = lm(spending ~ 1 + litter, data = catamaran)
cat_intercept_hat = unname(catamaran_lm$coefficients[1])
cat_intercept_hat
cat_slope_hat = unname(catamaran_lm$coefficients[2])
cat_slope_hat
# Chunk 5
plot(catamaran_lm, which=2)
# Chunk 6
catInt = confint(catamaran_lm, level=0.95)
catInt['litter',]
# Chunk 7
summary(catamaran_lm)
# Chunk 8
generate_linear_data = function( n, sigma2 ) {
x = rnorm(n, mean = 0, sd = 1)
eps = rnorm(n, mean = 0, sd = sqrt(sigma2))
y = -1 + (0.5*x) + eps
predictors = x
responses = y
linear_data = data.frame(predictors, responses)
return(linear_data)
}
# Chunk 9
sampleData = generate_linear_data(100, 0.25)
plot(sampleData, main = "Sample Plot of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 10
moreNoise = generate_linear_data(100, 1)
plot(moreNoise, main = "Sample Plot (Increased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 11
lessNoise = generate_linear_data(100, 0.1)
plot(lessNoise, main = "Sample Plot (Decreased Varience) of Responses VS Predictors", xlab = "Predictors", ylab = "Responses")
# Chunk 12
generate_and_estimate = function( n, sigma2 ) {
observations = generate_linear_data(n, sigma2)
model = lm(responses ~ 1 + predictors, data = observations)
beta1hat = unname(coef(model)[2])
return(beta1hat)
}
# Chunk 13
estimate_beta1hat_variance = function( n, sigma2, M ) {
replicates <- rep(NA,M)
for (i in 1:M) {
replicates[i] = generate_and_estimate(n, sigma2)
}
estimate = var(replicates)
return(estimate)
}
# Chunk 14
sig2 = seq(0.25, 4, 0.25)
estimates = rep(NA, length(sig2))
i = 0
for (sig in sig2) {
estimates[i] = estimate_beta1hat_variance(100, sig, 1000)
i = i + 1
}
plot(sig2, estimates, main = "Variance of Estimator as a function of Sigma Squared", xlab = "Sigma Squared", ylab = "Variance of Estimator Beta_1_hat")
# Chunk 15
lm.mtcars = lm(mpg ~ 1 + hp + qsec, data = mtcars)
plot(lm.mtcars,ask=F,which=1:2)
# summary(lm.mtcars)
summary(lm.mtcars)
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
download.file('https://kdlevin-uwstat.github.io/STAT340-Fall2021/hw/03/mule_kicks.csv', destfile='mule_kicks.csv')
# Chunk 1: setup
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
# Chunk 2
download.file('https://kdlevin-uwstat.github.io/STAT340-Fall2021/hw/03/mule_kicks.csv', destfile='mule_kicks.csv')
mule_kicks = read.csv('mule_kicks.csv', header=TRUE)
head(mule_kicks)
# Chunk 3
lambdahat <- mean(mule_kicks$deaths)
n = 280
Nrep <- 2000; # Number of repetitions (i.e., replicates)
replicates <- rep(NA,Nrep); # We will store replicates of lambdahat here.
for ( i in 1:Nrep) {
fake_data <- rpois(n=n, lambda=lambdahat);
replicates[i] <- mean( fake_data );
}
# Now construct the confidence interval
CI <- quantile( replicates, probs=c(0.025, 0.975) );
cat(CI)
mean(replicates) + (1.96 * sd(replicates))
mean(replicates) - (1.96 * sd(replicates))
hist(replicates)
